											->PseudoCode<-

->Here Following Functions are used:

1).void tobinary():This Function converts the given Min terms to its Binary and stores in array of Binaries of all Minterms.

2). int one_count():This Function counts the numbers of 1's in corresponding binary of Minterms which will used during Grouping.

3). int Combi(int,int,int):This Function returns the Combination(max) required during complete formation of Table.

4). int powerof2(int):This Function returns, if given number is power of 2 or not.

5). int power(int):This Function returns the power of 2 of given number.

6). void looping(int):This Function creates

->Algorithm():
{
//convert input minterms to its binary
//Here tab is 4d array which contains all Groupings
	
tobinary()
	
Repeat till number of Minterms
do
	binary[minterm_onebyone][variables] <- one_count(binary[ofMinterm],no_ofVariables)
	binary[minterm_onebyone][variables+1] <- 0
	binary[minterm_onebyone][variables+2] <- correspondingMinterm
	binary[minterm_onebyone][variables+3] <- correspondingMinterms		//Corresponding array 5(minterm) -> 0 1 0 1 2 0 5 5
		
Repeat i <- 0 till No_of_variables+1 time
do
	Repeat j <- 0 till No_of_variables+1-i time
	do
		tab[i][j] <- combi(variables,i,j)
		Repeat till all values of tab[i][j][k] <- NULL
	
	//Creating Groups according to number of 1's in corresponding Binary
	
Repeat for All minterms
	if binary[minterms][variables] = Different Number of 1'stores
		tab[0][i][minterm] <- binary[minterms]			//i is corresponding number of 1's to check
	endif
		
Repeat i <- 0 till No_of_variables+1
	if grouping_possible in tab[i][j+1] and tab[i][j] 
	then
		group in tab[i+1] column
		add the position of changed bit in array	
		all Groupings will be done
		if any minterm doesnt matches then
			grouping_possible <- 0
		endif
	endif
	
// binary: 0 0 0 1 1 0 1 1
	  0 0 1 1 2 0 3 3 here bit at 1 position changes so corresponding array
	
	in i+1 will be 0 0 2 1     1  0   1   1 1 3
	0021 is binary with differed bit with 2
	10   is number of 1's and if the given term is selected or not
	1    is position at which bit differed 
	113  original value with two matched value		
		
//After all Grouping check for unselected item
	
Repeat i <- 0 till variables+1 
	Repeat j <- 0 till variables+1-i
		Repeat k <- 0 till combi(variables,i,j)
		do
			if tab[i][j][k]!=NULL and tab[i][j][k][variables+1] = 0
			then 
				Store corresponding i,j,k in primeImplicantsIndex[][]
				and check if there is no duplicates
			endif
	
//check for which term only occurs once are Essential prime implicants and check for remaining minterm
	
Repeat loop till power(2,variables)
	if number of time term occurs != 0
	then 
		left_MT++
	endif
		
//left minterms are in reducedPIchart_X and left prime implicants in reducedPIchart_Y 
	
for i <-0 , j <- 0;j < power(2,variables) ;j++
do
	if number_of_time_termoccur[j]!=0
	then 
		reducedPIchart_X[i++] <- j
	endif
		
if no_of_leftPI!=0  //if there is PI left other than essential PI 
then 
		Repeat i <- 0 till no_of_leftPI
			Repeat j <- 0 till j<power (2,reducedPIchart_Y[i][0]
				Repeat k <- 0 till left_MT
					reducedPIchart[k][i] <- 1					
								//final chart prepared which is reduced
					
	Taking the least prime implicants covering all min terms and adding it to essential prime implicants
	//final result
	Repeat i <- 0 till no_of_essential_prime_implicants
		Repeat j <- 0 till variables
			if tab[essential_prime_implicants[i][0]][essential_prime_implicants[i][1]][essential_prime_implicants[i][2]][j] = 1
			then	
				print"%c",65+j
					else
						if tab[essential_prime_implicants[i][0]][essential_prime_implicants[i][1]][essential_prime_implicants[i][2]][j] = 0
						then
							print"%c'",65+j
						endif
				
				if i<no_of_essential_prime_impli-1
				then

				print"+"

				endif
			endif
	
else		//	if there is no PI left other than essential PI
	
	Repeat i <- 0 till no_of_essential_prime_implicants
		Repeat j <- 0 till variables
			if tab[essential_prime_implicants[i][0]][essential_prime_implicants[i][1]][essential_prime_implicants[i][2]][j] = 1
			then	
				print"%c",65+j
					else
						if tab[essential_prime_implicants[i][0]][essential_prime_implicants[i][1]][essential_prime_implicants[i][2]][j] = 0
						then
							print"%c'",65+j
						endif
				
				if	i<no_of_essential_prime_impli-1
				then
					print"+"
				endif
			endif
endif
}

	